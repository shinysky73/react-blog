// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  password     String
  posts        Post[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  comments     Comment[]
  likes        Like[]
}

model Post {
  id         Int          @id @default(autoincrement())
  title      String
  content    String?
  author     User         @relation(fields: [authorId], references: [id])
  authorId   Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  categories Category[]
  tags       Tag[]
  status     Status       @default(DRAFT)
  visibility Visibility   @default(PRIVATE)
  comments   Comment[]
  likes      Like[]
}

enum Status {
  DRAFT
  PUBLISHED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  parent    Comment?  @relation("Replies", fields: [parentId], references: [id])
  parentId  Int?
  replies   Comment[] @relation("Replies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@id([userId, postId])
}
